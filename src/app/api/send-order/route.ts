import { NextResponse } from "next/server";
import nodemailer from "nodemailer";

const GMAIL_USER = process.env.GMAIL_USER!;
const GMAIL_APP_PASSWORD = process.env.GMAIL_APP_PASSWORD!;

// –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∞
const createTransporter = () => {
  return nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: GMAIL_USER,
      pass: GMAIL_APP_PASSWORD,
    },
  });
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ª–∏—Å—Ç–∞ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
const createClientEmailText = ({
  name,
  lastname,
  phone,
  mail,
  deliveryType,
  deliveryAddress,
  paymentType,
  comment,
}: {
  [key: string]: string;
}) => `
–ü—Ä–∏–≤—ñ—Ç, ${name} ${lastname}!

–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É —ñ —Å–∫–æ—Ä–æ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.

üõí **–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:**
- üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
- ‚úâÔ∏è Email: ${mail}
- üöö –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryType}
- üìç –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryAddress}
- üí≥ –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: ${paymentType}
${comment ? `- üìù –ö–æ–º–µ–Ω—Ç–∞—Ä: ${comment}` : ""}

–Ø–∫—â–æ —É –≤–∞—Å —î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ –Ω–∞—à–æ—ó —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.

–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—Å! üòä
`;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ª–∏—Å—Ç–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const createAdminEmailText = ({
  name,
  lastname,
  phone,
  mail,
  deliveryType,
  deliveryAddress,
  paymentType,
  comment,
}: {
  [key: string]: string;
}) => `
üîî **–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ ${name} ${lastname}!**

üõí **–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:**
- üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
- ‚úâÔ∏è Email: ${mail}
- üöö –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryType}
- üìç –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryAddress}
- üí≥ –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: ${paymentType}
${comment ? `- üìù –ö–æ–º–µ–Ω—Ç–∞—Ä: ${comment}` : ""}

–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É.
`;

export async function POST(req: Request) {
  try {
    const data = await req.json();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ
    const requiredFields = [
      "lastname",
      "name",
      "phone",
      "mail",
      "deliveryType",
      "deliveryAddress",
      "paymentType",
    ];
    if (requiredFields.some((field) => !data[field])) {
      return NextResponse.json(
        { message: "Please fill all required fields" },
        { status: 400 },
      );
    }

    const transporter = createTransporter();

    // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ª–∏—Å—Ç—ñ–≤
    const clientMailOptions = {
      from: GMAIL_USER,
      to: data.mail,
      subject: "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
      text: createClientEmailText(data),
    };

    const adminMailOptions = {
      from: GMAIL_USER,
      to: GMAIL_USER,
      subject: "–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!",
      text: createAdminEmailText(data),
    };

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–±–∏–¥–≤–∞ –ª–∏—Å—Ç–∏
    await Promise.all([
      transporter.sendMail(clientMailOptions),
      transporter.sendMail(adminMailOptions),
    ]);

    return NextResponse.json(
      { message: "Order sent successfully" },
      { status: 200 },
    );
  } catch (error) {
    console.error("Error sending email:", error);
    return NextResponse.json(
      { message: "An error occurred while sending the order" },
      { status: 500 },
    );
  }
}

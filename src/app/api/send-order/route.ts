/* eslint-disable @typescript-eslint/no-explicit-any */
import config from "@/config";
import { formatPrice } from "@/lib/utils";
import { NextResponse } from "next/server";
import nodemailer from "nodemailer";

const BUDTPLOIZOL_USER = config.env.mail.user;
const BUDTPLOIZOL_PASSWORD = config.env.mail.appPassword;

// –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∞
const createTransporter = () => {
  return nodemailer.createTransport({
    host: "mail.adm.tools", // smtp - —Å–µ—Ä–≤–µ—Ä
    port: 465, // –ø–æ—Ä—Ç 465 –¥–ª—è SSL –∞–±–æ 587 –¥–ª—è TLS
    secure: true, // true –¥–ª—è –ø–æ—Ä—Ç—É 465 (SSL)
    auth: {
      user: BUDTPLOIZOL_USER,
      pass: BUDTPLOIZOL_PASSWORD,
    },
    logger: true, // üëà –≤–∏–≤–µ–¥–µ –≤—Å—ñ –ª–æ–≥—ñ SMTP
    debug: true, // üëà —Ç–µ–∂ –∫–æ—Ä–∏—Å–Ω–µ
  });
};

const createItemsTable = (
  items: { name: string; price: number; quantity: number }[],
) => {
  return `
    <table border="1" cellpadding="6" cellspacing="0" style="border-collapse: collapse; font-family: sans-serif; font-size: 14px; width: 100%;">
      <thead>
        <tr>
          <th align="left">–ù–∞–∑–≤–∞</th>
          <th align="center">–ö—ñ–ª—å–∫—ñ—Å—Ç—å</th>
          <th align="right">–¶—ñ–Ω–∞</th>
        </tr>
      </thead>
      <tbody>
        ${items
          .map(
            (item) => `
              <tr>
                <td>${item.name}</td>
                <td align="center">${item.quantity}</td>
                <td align="right">${formatPrice(item.price)}</td>
              </tr>
            `,
          )
          .join("")}
      </tbody>
    </table>
  `;
};

const createClientEmailHtml = ({
  name,
  lastname,
  phone,
  mail,
  deliveryType,
  deliveryAddress,
  paymentType,
  comment,
  items,
  totalPrice,
}: any) => `
  <div style="font-family: sans-serif; font-size: 16px; line-height: 1.5;">
    <p>–ü—Ä–∏–≤—ñ—Ç, <strong>${name} ${lastname}</strong>!</p>
    <p>–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É —ñ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.</p>
    <h3>–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</h3>
    <ul>
      <li><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${phone}</li>
      <li><strong>Email:</strong> ${mail}</li>
      <li><strong>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> ${deliveryType}</li>
      <li><strong>–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> ${deliveryAddress}</li>
      <li><strong>–û–ø–ª–∞—Ç–∞:</strong> ${paymentType === "payNoCash" ? "–ë–µ–∑–≥–æ—Ç—ñ–≤–∫–æ–≤–∞" : paymentType}</li>
      ${comment ? `<li><strong>–ö–æ–º–µ–Ω—Ç–∞—Ä:</strong> ${comment}</li>` : ""}
    </ul>
    <h3>–ó–∞–º–æ–≤–ª–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏:</h3>
    ${createItemsTable(items)}
    <p style="margin-top: 10px; font-size: 18px;"><strong>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${formatPrice(totalPrice)}</strong></p>
    <hr />
    <p style="font-size: 14px;">–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –Ω–µ —Å–æ—Ä–æ–º—Ç–µ—Å—å, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ —Ü–µ–π –ª–∏—Å—Ç –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞–º.</p>
    <p style="color: gray; font-size: 13px;">–ë—É–¥—å–¢–µ–ø–ª–æ–Ü–∑–æ–ª ‚Äî —Ç–µ–ø–ª–æ –Ω–µ —Ç–∞–º, –¥–µ –≥—Ä—ñ—î, –∞ –¥–µ –Ω–µ –≤–∏–≤—ñ—Ç—Ä—é—î—Ç—å—Å—è.</p>
  </div>
`;

const createAdminEmailHtml = ({
  name,
  lastname,
  phone,
  mail,
  deliveryType,
  deliveryAddress,
  paymentType,
  comment,
  items,
  totalPrice,
}: any) => `
  <div style="font-family: sans-serif; font-size: 16px; line-height: 1.5;">
    <h2>üîî –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</h2>
    <p><strong>–ö–ª—ñ—î–Ω—Ç:</strong> ${name} ${lastname}</p>
    <ul>
      <li><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${phone}</li>
      <li><strong>Email:</strong> ${mail}</li>
      <li><strong>–î–æ—Å—Ç–∞–≤–∫–∞:</strong> ${deliveryType}</li>
      <li><strong>–ê–¥—Ä–µ—Å–∞:</strong> ${deliveryAddress}</li>
      <li><strong>–û–ø–ª–∞—Ç–∞:</strong> ${paymentType === "payNoCash" ? "–ë–µ–∑–≥–æ—Ç—ñ–≤–∫–æ–≤–∞" : paymentType}</li>
      ${comment ? `<li><strong>–ö–æ–º–µ–Ω—Ç–∞—Ä:</strong> ${comment}</li>` : ""}
    </ul>
    <h3>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:</h3>
    ${createItemsTable(items)}
    <p style="margin-top: 10px; font-size: 18px;"><strong>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${formatPrice(totalPrice)}</strong></p>
    <hr />
    <p style="font-size: 13px; color: gray;">–†–æ–∑—Ä–∞—Ö–æ–≤—É–π—Å—è, –¥–∑–≤–æ–Ω–∏, –≤—ñ–¥–≤–∞–Ω—Ç–∞–∂—É–π.</p>
  </div>
`;

export async function POST(req: Request) {
  try {
    const data = await req.json();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ
    const requiredFields = [
      "lastname",
      "name",
      "phone",
      "mail",
      "deliveryType",
      "deliveryAddress",
      "paymentType",
    ];
    if (requiredFields.some((field) => !data[field])) {
      return NextResponse.json(
        { message: "Please fill all required fields" },
        { status: 400 },
      );
    }

    const transporter = createTransporter();

    const clientMailOptions = {
      from: BUDTPLOIZOL_USER,
      to: data.mail,
      subject: "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äî –ë—É–¥–¢–µ–ø–ª–æ–Ü–∑–æ–ª",
      html: createClientEmailHtml(data),
    };

    const adminMailOptions = {
      from: BUDTPLOIZOL_USER,
      to: BUDTPLOIZOL_USER,
      subject: `–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ ${data.name} ${data.lastname}`,
      html: createAdminEmailHtml(data),
    };

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–±–∏–¥–≤–∞ –ª–∏—Å—Ç–∏
    await Promise.all([
      transporter.sendMail(clientMailOptions),
      transporter.sendMail(adminMailOptions),
    ]);

    return NextResponse.json(
      { message: "Order sent successfully" },
      { status: 200 },
    );
  } catch (error) {
    console.error("Error sending email:", error);
    return NextResponse.json(
      { message: "An error occurred while sending the order" },
      { status: 500 },
    );
  }
}
